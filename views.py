from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from .forms import SignUpForm
from .models import FinancialGoal
import os, json
from django.views.decorators.http import require_POST


# Load environment variables

# Sign-up
def signup_view(request):
    if request.method == 'POST':
        form = SignUpForm(request.POST)
        if form.is_valid():
            user = form.save(commit=False)
            user.email = form.cleaned_data['email']
            user.save()
            return redirect('login')
    else:
        form = SignUpForm()
    return render(request, 'accounts/signup.html', {'form': form})

# Login
def login_view(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            return redirect('dashboard')
        else:
            return render(request, 'accounts/login.html', {'error': 'Invalid credentials'})
    return render(request, 'accounts/login.html')

def logout_view(request):
    logout(request)
    return redirect('dashboard')
# Home
def home_view(request):
    return render(request, 'accounts/home.html')

# Dashboard
@login_required(login_url='login')
def dashboard_view(request):
    return render(request, 'accounts/dashboard.html')



# Finance Assistant View
@login_required(login_url='login')
def finance_assistant_view(request):
    error = None
    if request.method == 'POST':
        try:
            age = int(request.POST.get('age', 0))
            income = int(request.POST.get('income', 0))
            expenses = int(request.POST.get('expenses', 0))
            risk = request.POST.get('risk_appetite', 'medium')
            goal = request.POST.get('goal', '')

            if income <= 0 or expenses < 0 or age <= 0:
                raise ValueError("Please fill all fields correctly.")

            savings = income - expenses
            amount_to_invest = savings * 0.3 if savings > 0 else 0

            beginner_plans = [
                "1. Start a Recurring Deposit (RD)",
                "2. Invest small amounts in SIPs (Mutual Funds)",
                "3. Open a Sukanya Samriddhi or PPF Account"
            ]

            tax_saving_tips = [
                "Invest in ELSS Mutual Funds under Section 80C",
                "Buy Health Insurance (Deduction under 80D)",
                "Use NPS (National Pension Scheme) for extra 50K deduction"
            ]

            if age < 20:
                plans = beginner_plans
                recommended_bank = "Post Office or Paytm Money"
            else:
                if risk == 'low':
                    plans = ["PPF", "Fixed Deposits", "Post Office Schemes"]
                    recommended_bank = "SBI, Post Office"
                elif risk == 'medium':
                    plans = ["Balanced Mutual Funds", "Gold ETFs", "Life Insurance"]
                    recommended_bank = "HDFC, Axis Mutual Fund"
                else:
                    plans = ["Equity Funds", "SIP in Small-Caps", "Direct Stocks"]
                    recommended_bank = "Zerodha, Groww"

            graph_labels = ['Low Risk', 'Medium Risk', 'High Risk']
            graph_values = [2, 5, 9] if age < 20 else [3, 6, 9]
            monthly_saving_projection = [round(savings * (1 + 0.02 * i)) for i in range(6)] if savings > 0 else [0] * 6

            user_goals = FinancialGoal.objects.filter(user=request.user)

            suggestions = {
                'plans': plans,
                'bank': recommended_bank,
                'income': income,
                'expenses': expenses,
                'savings': savings,
                'amount': round(amount_to_invest),
                'graph_labels_json': json.dumps(graph_labels),
                'graph_values_json': json.dumps(graph_values),
                'monthly_projection_json': json.dumps(monthly_saving_projection),
                'ai_response': None,
                'goals': user_goals,
                'tax_tips': tax_saving_tips
            }

            return render(request, 'finance_assistant_view/investment_suggestor.html', {
                'suggestions': suggestions,
                'error': None
            })

        except Exception as e:
            error = str(e)

    # For GET or in case of error
    suggestions = {
        'plans': [],
        'bank': '',
        'income': 0,
        'expenses': 0,
        'savings': 0,
        'amount': 0,
        'graph_labels_json': json.dumps(['Low Risk', 'Medium Risk', 'High Risk']),
        'graph_values_json': json.dumps([0, 0, 0]),
        'monthly_projection_json': json.dumps([0] * 6),
        'ai_response': None,
        'goals': FinancialGoal.objects.filter(user=request.user),
        'tax_tips': []
    }

    return render(request, 'finance_assistant_view/investment_suggestor.html', {
        'suggestions': suggestions,
        'error': error
    })


from django.shortcuts import render
from django.http import JsonResponse
from gtts import gTTS
import os
import uuid
from difflib import get_close_matches  # üëà NEW

def AIAssistant(request):
    return render(request, 'accounts/AIAssistant.html')


    # FAQ dictionary
FAQS = {
    "‡≤®‡≤æ‡≤®‡≥Å ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤é‡≤∑‡≥ç‡≤ü‡≥Å ‡≤â‡≤≥‡≤ø‡≤∏‡≤¨‡≥á‡≤ï‡≥Å?": "‡≤∏‡≤æ‡≤ß‡≤æ‡≤∞‡≤£‡≤µ‡≤æ‡≤ó‡≤ø ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤¶‡≤æ‡≤Ø‡≤¶ ‡≤ï‡≤®‡≤ø‡≤∑‡≥ç‡≤† 20% ‡≤â‡≤≥‡≤ø‡≤∏‡≤≤‡≥Å ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.",
    "‡≤®‡≤æ‡≤®‡≥Å ‡≤∏‡≤™‡≥ç‡≤§‡≤æ‡≤π‡≤ø‡≤ï ‡≤∏‡≤Ç‡≤¨‡≤≥ ‡≤π‡≥ä‡≤Ç‡≤¶‡≤ø‡≤¶‡≥ç‡≤¶‡≤∞‡≥Ü ‡≤π‡≥á‡≤ó‡≥Ü ‡≤Ø‡≥ã‡≤ú‡≤®‡≥Ü ‡≤Æ‡≤æ‡≤°‡≥ã‡≤¶‡≥Å?": "‡≤®‡≥Ä‡≤µ‡≥Å ‡≤¶‡≤ø‡≤®‡≤®‡≤ø‡≤§‡≥ç‡≤Ø‡≤¶ ‡≤ñ‡≤∞‡≥ç‡≤ö‡≤ø‡≤ó‡≥Ü ‡≤í‡≤Ç‡≤¶‡≥Å ‡≤≠‡≤æ‡≤ó ‡≤Æ‡≥Ä‡≤∏‡≤≤‡≤ø‡≤°‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤â‡≤≥‡≤ø‡≤¶‡≤¶‡≤®‡≥ç‡≤®‡≥Å ‡≤â‡≤≥‡≤ø‡≤§‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤ø.",
    "‡≤®‡≤æ‡≤®‡≥Å ‡≤Ø‡≤æ‡≤µ ‡≤ñ‡≤∞‡≥ç‡≤ö‡≥Å‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü ‡≤Æ‡≤æ‡≤°‡≤¨‡≥á‡≤ï‡≥Å?": "‡≤Ö‡≤ó‡≤§‡≥ç‡≤Ø‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤‡≤¶ ‡≤Ö‡≤Ç‡≤ö‡≥Ü‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤π‡≤æ‡≤ó‡≥Ç ‡≤Ö‡≤§‡≤ø ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≥Å ‡≤ñ‡≤∞‡≥ç‡≤ö‡≥Å ‡≤Ü‡≤ó‡≥Å‡≤µ ‡≤µ‡≤ø‡≤∑‡≤Ø‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤ï‡≤§‡≥ç‡≤§‡≤∞‡≤ø‡≤∏‡≤ø.",
    "EMI ‡≤Ö‡≤Ç‡≤¶‡≥ç‡≤∞‡≥Ü ‡≤è‡≤®‡≥Å? ‡≤Ö‡≤¶‡≤∞‡≤≤‡≥ç‡≤≤‡≤ø ‡≤∏‡≤ø‡≤ï‡≥ç‡≤ï‡≤æ‡≤™‡≤ü‡≥ç‡≤ü‡≥Ü ‡≤ï‡≤∑‡≥ç‡≤ü‡≤µ‡≥á‡≤®‡≥Å?": "EMI (‡≤á‡≤é‡≤Ç‡≤ê) ‡≤Ö‡≤Ç‡≤¶‡≥ç‡≤∞‡≥Ü ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤™‡≤æ‡≤µ‡≤§‡≤ø‡≤∏‡≤¨‡≥á‡≤ï‡≤æ‡≤¶ ‡≤ï‡≤Ç‡≤§‡≥Å. ‡≤∏‡≤∞‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø ‡≤™‡≤æ‡≤µ‡≤§‡≤ø‡≤∏‡≤¶‡≤ø‡≤¶‡≥ç‡≤¶‡≤∞‡≥Ü ‡≤¨‡≤°‡≥ç‡≤°‡≤ø‡≤¶‡≤∞ ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≤æ‡≤≤‡≤¶ ‡≤Æ‡≥ä‡≤§‡≥ç‡≤§ ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≤æ‡≤ó‡≤¨‡≤π‡≥Å‡≤¶‡≥Å.",
    "‡≤¨‡≤≤‡≤µ‡≤æ‡≤¶ ‡≤â‡≤≥‡≤ø‡≤§‡≤æ‡≤Ø‡≤¶ ‡≤ó‡≥Å‡≤∞‡≤ø ‡≤π‡≥á‡≤ó‡≥Ü ‡≤á‡≤°‡≥Å‡≤µ‡≥Å‡≤¶‡≥Å?": "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤ó‡≥Å‡≤∞‡≤ø ‡≤∏‡≥ç‡≤™‡≤∑‡≥ç‡≤ü‡≤µ‡≤æ‡≤ó‡≤ø‡≤∞‡≤≤‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Ö‡≤¶‡≤∞ ‡≤µ‡≥á‡≤≥‡≤æ‡≤™‡≤ü‡≥ç‡≤ü‡≤ø ‡≤Æ‡≤æ‡≤°‡≤ø.",
    
    # üëá New FAQs
    "‡≤¨‡≥ç‡≤Ø‡≤æ‡≤Ç‡≤ï‡≥ç ‡≤ñ‡≤æ‡≤§‡≥Ü ‡≤π‡≥á‡≤ó‡≥Ü ‡≤§‡≥Ü‡≤∞‡≥Ü‡≤Ø‡≥Å‡≤µ‡≥Å‡≤¶‡≥Å?": "‡≤Ö‡≤¶‡≤ï‡≥ç‡≤ï‡≤æ‡≤ó‡≤ø ‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤ø‡≤® ‡≤ï‡≤æ‡≤∞‡≥ç‡≤°‡≥ç (‡≤Ü‡≤ß‡≤æ‡≤∞‡≥ç, ‡≤™‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç), ‡≤´‡≥ã‡≤ü‡≥ã ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤µ‡≤ø‡≤≥‡≤æ‡≤∏ ‡≤™‡≥Å‡≤∞‡≤æ‡≤µ‡≥Ü ‡≤¨‡≥á‡≤ï‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü. ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤π‡≤§‡≥ç‡≤§‡≤ø‡≤∞‡≤¶ ‡≤¨‡≥ç‡≤Ø‡≤æ‡≤Ç‡≤ï‡≥ç‚Äå‡≤ó‡≥Ü ‡≤π‡≥ã‡≤ó‡≤ø ‡≤´‡≤æ‡≤∞‡≥ç‡≤Æ‡≥ç ‡≤≠‡≤∞‡≥ç‡≤§‡≤ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å.",
    "‡≤∏‡≥á‡≤µ‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤ñ‡≤æ‡≤§‡≥Ü ‡≤Ö‡≤Ç‡≤¶‡≥ç‡≤∞‡≥Ü ‡≤è‡≤®‡≥Å?": "‡≤∏‡≥á‡≤µ‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤ñ‡≤æ‡≤§‡≥Ü ‡≤í‡≤Ç‡≤¶‡≥Å ‡≤∏‡≤æ‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø ‡≤¨‡≥ç‡≤Ø‡≤æ‡≤Ç‡≤ï‡≥ç ‡≤ñ‡≤æ‡≤§‡≥Ü ‡≤Ü‡≤ó‡≤ø‡≤¶‡≥ç‡≤¶‡≥Å, ‡≤á‡≤¶‡≤∞‡≤≤‡≥ç‡≤≤‡≤ø ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤π‡≤£ ‡≤â‡≤≥‡≤ø‡≤∏‡≤¨‡≤π‡≥Å‡≤¶‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤¨‡≤°‡≥ç‡≤°‡≤ø ‡≤ï‡≥Ç‡≤° ‡≤™‡≤°‡≥Ü‡≤Ø‡≤¨‡≤π‡≥Å‡≤¶‡≥Å.",
    "‡≤¨‡≤°‡≥ç‡≤°‡≤ø‡≤¶‡≤∞ ‡≤Ö‡≤Ç‡≤¶‡≥ç‡≤∞‡≥Ü ‡≤è‡≤®‡≥Å?": "‡≤¨‡≤°‡≥ç‡≤°‡≤ø‡≤¶‡≤∞ ‡≤Ö‡≤Ç‡≤¶‡≥ç‡≤∞‡≥Ü ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤â‡≤≥‡≤ø‡≤§‡≤æ‡≤Ø‡≤¶ ‡≤Æ‡≥á‡≤≤‡≥Ü ‡≤¨‡≥ç‡≤Ø‡≤æ‡≤Ç‡≤ï‡≥ç ‡≤®‡≥Ä‡≤°‡≥Å‡≤µ ‡≤∂‡≥á‡≤ï‡≤°‡≤æ‡≤µ‡≤æ‡≤∞‡≥Å ‡≤Æ‡≥ä‡≤§‡≥ç‡≤§.",
    "‡≤°‡≥Ü‡≤¨‡≤ø‡≤ü‡≥ç ‡≤ï‡≤æ‡≤∞‡≥ç‡≤°‡≥ç ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤ï‡≥ç‡≤∞‡≥Ü‡≤°‡≤ø‡≤ü‡≥ç ‡≤ï‡≤æ‡≤∞‡≥ç‡≤°‡≥ç ‡≤µ‡≥ç‡≤Ø‡≤§‡≥ç‡≤Ø‡≤æ‡≤∏‡≤µ‡≥á‡≤®‡≥Å?": "‡≤°‡≥Ü‡≤¨‡≤ø‡≤ü‡≥ç ‡≤ï‡≤æ‡≤∞‡≥ç‡≤°‡≥ç ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤ñ‡≤æ‡≤§‡≥Ü‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤á‡≤∞‡≥Å‡≤µ ‡≤π‡≤£‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≤≥‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü. ‡≤ï‡≥ç‡≤∞‡≥Ü‡≤°‡≤ø‡≤ü‡≥ç ‡≤ï‡≤æ‡≤∞‡≥ç‡≤°‡≥ç‚Äå‡≤®‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¨‡≥ç‡≤Ø‡≤æ‡≤Ç‡≤ï‡≥ç ‡≤®‡≥Ä‡≤°‡≤ø‡≤¶ ‡≤ï‡≥ç‡≤∞‡≥Ü‡≤°‡≤ø‡≤ü‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤¨‡≤≥‡≤∏‡≤¨‡≤π‡≥Å‡≤¶‡≥Å.",
    "‡≤®‡≤æ‡≤®‡≥Å ‡≤é‡≤∑‡≥ç‡≤ü‡≤∞‡≤µ‡≤∞‡≥Ü‡≤ó‡≥Ü ‡≤â‡≤ö‡≤ø‡≤§ ‡≤¨‡≥ç‡≤Ø‡≤æ‡≤Ç‡≤ï‡≥ç ‡≤ñ‡≤æ‡≤§‡≥Ü ‡≤á‡≤∞‡≤ø‡≤∏‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤¨‡≤π‡≥Å‡≤¶‡≥Å?": "‡≤¨‡≤π‡≥Å‡≤§‡≥Ü‡≤ï ‡≤¨‡≥ç‡≤Ø‡≤æ‡≤Ç‡≤ï‡≥ç‚Äå‡≤ó‡≤≥‡≥Å ‡≤Æ‡≥å‡≤≤‡≥ç‡≤Ø‡≤Æ‡≤æ‡≤™‡≤® ‡≤∂‡≥Ç‡≤≤‡≥ç‡≤ï‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤‡≤¶‡≥Ü ‡≤Æ‡≥Ç‡≤≤ ‡≤∏‡≥á‡≤µ‡≥Ü‡≤ó‡≤≥‡≤ø‡≤ó‡≤æ‡≤ó‡≤ø ‡≤ñ‡≤æ‡≤§‡≥Ü ‡≤®‡≥Ä‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≤µ‡≥Ü. ‡≤®‡≤ø‡≤Ø‡≤Æ‡≤ó‡≤≥‡≥Å ‡≤¨‡≥ç‡≤Ø‡≤æ‡≤Ç‡≤ï‡≥ç ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞ ‡≤¨‡≤¶‡≤≤‡≤æ‡≤ó‡≤¨‡≤π‡≥Å‡≤¶‡≥Å.",
}

def steps_to_create_account(request):
    return render(request, 'accounts/create_account_steps.html')

def financeeducation(request):
    return render(request, 'accounts/financeeducation.html')

def chatbot_view(request):
    query = request.GET.get('query', '').strip()
    lang = request.GET.get('lang', 'kn')

    # üß† Use fuzzy matching to find closest FAQ
    matches = get_close_matches(query, FAQS.keys(), n=1, cutoff=0.5)

    if matches:
        response = FAQS[matches[0]]
    else:
        response = "‡≤ï‡≥ç‡≤∑‡≤Æ‡≤ø‡≤∏‡≤ø, ‡≤®‡≤æ‡≤®‡≥Å ‡≤à ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü‡≤ó‡≥Ü ‡≤â‡≤§‡≥ç‡≤§‡≤∞ ‡≤®‡≥Ä‡≤°‡≤≤‡≥Å ‡≤∏‡≤æ‡≤ß‡≥ç‡≤Ø‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤á‡≤®‡≥ç‡≤®‡≥ä‡≤Ç‡≤¶‡≥Å ‡≤∞‡≥Ä‡≤§‡≤ø‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤ï‡≥á‡≤≥‡≤ø."

    # üéµ Generate audio
    os.makedirs("media", exist_ok=True)
    filename = f"{uuid.uuid4()}.mp3"
    audio_path = os.path.join("media", filename)
    tts = gTTS(response, lang=lang)
    tts.save(audio_path)

    return JsonResponse({
        'response': response,
        'audio': f'/media/{filename}',
    })

# views.py
from django.shortcuts import render, redirect
from .forms import BudgetEntryForm
from .models import BudgetEntry
import json

def budget_tracker(request):
    if request.method == 'POST':
        form = BudgetEntryForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('budget_tracker')
    else:
        form = BudgetEntryForm()

    entries = BudgetEntry.objects.all()
    chart_data = [
        {
            'month': entry.month,
            'budget': entry.budget,
            'expenses': entry.expenses
        }
        for entry in entries
    ]

    context = {
        'form': form,
        'chart_data': json.dumps(chart_data)
    }
    return render(request, 'accounts/budget_tracker.html', context)
